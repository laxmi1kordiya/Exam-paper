import React, { useCallback, useEffect, useState } from "react";
import { useAuthenticatedFetch } from "../../Api/Axios";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import Questionlist from "./questions";

const GeneratePaper = () => {
  const [boards, setBoards] = useState([]);
  const [standards, setStandards] = useState([]);
  const [subjects, setSubjects] = useState([]);
  const [chapters, setChapters] = useState([]);
  const [allData, setAllData] = useState([]);
  const fetch = useAuthenticatedFetch();
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);

  const [formData, setFormData] = useState({
    board: "",
    standard: "",
    subject: "",
    subjectName: "",
    chapter: "",
    generateType: "",
  });
  const [headerData, setHeaderData] = useState({
    title: "Create Paper",
    subtitle: "Generated By Create Paper",
  });

  const fetchData = useCallback(async () => {
    try {
      const [boardRes, allData] = await Promise.all([
        fetch.get("getBoardData"),
        fetch.get("getAllData"),
      ]);
      const boardOptions = boardRes.data.map((item) => ({
        label: item.name,
        value: item.name,
      }));
      setAllData(allData.data);
      setBoards(boardOptions);
    } catch (error) {
      console.error("Error fetching data:", error);
      toast.error("Failed to fetch initial data. Please try again.");
    }
  }, []);

  const fetchheaderData = useCallback(async () => {
    try {
      const res = await fetch.get("getHeaderData");
      const data = res?.data;
      if (data) {
        setHeaderData(data);
      }
    } catch (error) {
      console.error("Error fetching header data:", error);
      toast.error("Failed to fetch header data. Using default values.");
    }
  }, []);

  useEffect(() => {
    fetchData();
  }, []);

  const handleGoToStep2 = () => {
    if (!formData.chapter) {
      toast.error("Please select a chapter before proceeding.");
      return;
    }
    fetchheaderData();
    setCurrentStep(2);
  };

  const handleHeader = async (e) => {
    e.preventDefault();
    console.log("Submitting headerData:", headerData);
    headerData["userId"] = localStorage.getItem("userId");

    try {
      const res1 = await fetch.post("paperSetting", headerData);
      console.log("API response (success):", res1);
      toast.success("Paper header updated successfully!");
      setIsSubmitted(true);
      setCurrentStep(3);
    } catch (error) {
      console.error("Error submitting header:", error);
      toast.error("Failed to update paper header. Proceeding to next step.");
      setIsSubmitted(true); // Still proceed to step 3 even if header update fails
      setCurrentStep(3);
    } finally {
      console.log("isSubmitted in finally:", isSubmitted);
      console.log("currentStep in finally:", currentStep);
    }
  };

  const Change = (e) => {
    const { name, value } = e.target;
    setHeaderData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    if (name === "board") {
      const selectedBoard = allData.find((board) => board.name === value);
      const stdOptions =
        selectedBoard?.standards?.map((std) => ({
          label: std.name,
          value: std._id,
        })) || [];

      setStandards(stdOptions);
      setSubjects([]);
      setChapters([]);
      setFormData((prev) => ({
        ...prev,
        standard: "",
        subject: "",
        subjectName: "",
        chapter: "",
      }));
    }
    if (name === "standard") {
      const selectedBoard = allData.find(
        (board) => board.name === formData.board
      );
      const subOptions =
        selectedBoard.subjects
          .filter((sub) => sub.Standard_id === value)
          .map((sub) => ({
            label: sub.name,
            value: sub._id,
          })) || [];

      setSubjects(subOptions);
      setChapters([]);
      setFormData((prev) => ({
        ...prev,
        subject: "",
        subjectName: "",
        chapter: "",
      }));
    }

    if (name === "subject") {
      const selectedBoard = allData.find(
        (board) => board.name === formData.board
      );
      const chOptions =
        selectedBoard.chapters
          .filter((ch) => ch.Subject_id === value)
          .map((ch) => ({
            label: ch.name,
            value: ch._id,
          })) || [];

      setChapters(chOptions);
      setFormData((prev) => ({
        ...prev,
        chapter: "",
      }));
    }
  };

  const steps = [
    { id: 1, name: "Select Options" },
    { id: 2, name: "Paper Header" },
    { id: 3, name: "Question List" },
  ];

  return (
    <div className="content-page">
      <div className="main-content">
        {/* Stepper */}
        <div className="flex justify-center mb-6">
          {steps.map((step) => (
            <div key={step.id} className="flex items-center">
              <div className="flex flex-col items-center">
                <div
                  className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    currentStep === step.id
                      ? "bg-blue-500 text-white"
                      : currentStep > step.id
                      ? "bg-green-500 text-white"
                      : "bg-gray-300 text-gray-700"
                  }`}
                >
                  {currentStep > step.id ? (
                    <svg
                      className="w-5 h-5"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M5 13l4 4L19 7"
                      />
                    </svg>
                  ) : (
                    step.id
                  )}
                </div>
                <span className="text-sm mt-1">{step.name}</span>
              </div>
              {step.id < steps.length && (
                <div
                  className={`h-1 w-16 mx-2 ${
                    currentStep > step.id ? "bg-green-500" : "bg-gray-300"
                  }`}
                ></div>
              )}
            </div>
          ))}
        </div>

        {/* Step 1: Form Selection */}
        {currentStep === 1 && (
          <>
            <div className="header">
              <div className="title-container">
                <h2>Generate Paper</h2>
                <p>Generate Paper of Your Choice</p>
              </div>
            </div>

            <div className="form-container">
              <div className="form-group">
                <select
                  name="board"
                  value={formData.board}
                  onChange={handleChange}
                >
                  <option value="">--Select Board--</option>
                  {boards.map((board, idx) => (
                    <option key={idx} value={board.value}>
                      {board.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <select
                  name="standard"
                  value={formData.standard}
                  onChange={handleChange}
                >
                  <option value="">--Select Standard--</option>
                  {standards.map((std, idx) => (
                    <option key={idx} value={std.value}>
                      {std.label}
                    </option>
                  ))}
                </select>
              </div>
              <div className="form-group">
                <select
                  name="subject"
                  value={formData.subject}
                  onChange={handleChange}
                >
                  <option value="">--Select Subject--</option>
                  {subjects.map((sub, idx) => (
                    <option key={idx} value={sub.value}>
                      {sub.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <select
                  name="chapter"
                  value={formData.chapter}
                  onChange={handleChange}
                >
                  <option value="">--Select Chapter--</option>
                  {chapters.map((chapter, idx) => (
                    <option key={idx} value={chapter.value}>
                      {chapter.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <select
                  name="generateType"
                  value={formData.generateType}
                  onChange={handleChange}
                >
                  <option value="">--Generate Type--</option>
                  <option value="Manually">Manually</option>
                  <option value="Random">Random</option>
                </select>
              </div>

              {formData.generateType === "Manually" && (
                <button type="button" onClick={handleGoToStep2}>
                  Next
                </button>
              )}
            </div>
          </>
        )}

        {/* Step 2: Paper Header Settings */}
        {currentStep === 2 && formData.generateType === "Manually" && (
          <div className="signin-box">
            <h3 className="text-center">Paper Header Settings</h3>
            <p className="text-center text-dark">
              Configure details for the exam paper
            </p>
            <form onSubmit={handleHeader}>
              <div className="row">
                <div className="form-group">
                  <label htmlFor="title">Title</label>
                  <input
                    type="text"
                    name="title"
                    className="form-control"
                    id="title"
                    value={headerData.title}
                    onChange={Change}
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="subtitle">Subtitle</label>
                  <input
                    type="text"
                    name="subtitle"
                    className="form-control"
                    id="subtitle"
                    value={headerData.subtitle}
                    onChange={Change}
                  />
                </div>
              </div>

              <button type="submit">Submit</button>
            </form>
          </div>
        )}

        {/* Step 3: Question List */}
        {currentStep === 3 && isSubmitted ? (
          <div className="question-list-wrapper">
            {formData.chapter ? (
              <Questionlist
                chapterId={formData.chapter}
                formData={formData}
                allData={allData}
              />
            ) : (
              <div className="text-center text-red-500">
                No chapter selected. Please go back to Step 1 and select a
                chapter.
              </div>
            )}
          </div>
        ) : currentStep === 3 && !isSubmitted ? (
          <div className="text-center text-red-500">
            Error: isSubmitted is false while currentStep is 3. This should not
            happen.
          </div>
        ) : null}

        <ToastContainer />
      </div>
    </div>
  );
};

export default GeneratePaper;